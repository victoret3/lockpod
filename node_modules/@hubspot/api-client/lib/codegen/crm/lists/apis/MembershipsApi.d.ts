import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { CollectionResponseLong } from '../models/CollectionResponseLong';
import { MembershipChangeRequest } from '../models/MembershipChangeRequest';
import { MembershipsUpdateResponse } from '../models/MembershipsUpdateResponse';
export declare class MembershipsApiRequestFactory extends BaseAPIRequestFactory {
    add(listId: number, requestBody: Array<number>, _options?: Configuration): Promise<RequestContext>;
    addAllFromList(listId: number, sourceListId: number, _options?: Configuration): Promise<RequestContext>;
    addAndRemove(listId: number, membershipChangeRequest: MembershipChangeRequest, _options?: Configuration): Promise<RequestContext>;
    getPage(listId: number, after?: string, before?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    remove(listId: number, requestBody: Array<number>, _options?: Configuration): Promise<RequestContext>;
    removeAll(listId: number, _options?: Configuration): Promise<RequestContext>;
}
export declare class MembershipsApiResponseProcessor {
    addWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MembershipsUpdateResponse>>;
    addAllFromListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    addAndRemoveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MembershipsUpdateResponse>>;
    getPageWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CollectionResponseLong>>;
    removeWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MembershipsUpdateResponse>>;
    removeAllWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
}
