import { HttpInfo } from '../http/http';
import { Configuration } from '../configuration';
import { BatchInputMarketingEventCreateRequestParams } from '../models/BatchInputMarketingEventCreateRequestParams';
import { BatchInputMarketingEventEmailSubscriber } from '../models/BatchInputMarketingEventEmailSubscriber';
import { BatchInputMarketingEventExternalUniqueIdentifier } from '../models/BatchInputMarketingEventExternalUniqueIdentifier';
import { BatchInputMarketingEventSubscriber } from '../models/BatchInputMarketingEventSubscriber';
import { BatchResponseMarketingEventPublicDefaultResponse } from '../models/BatchResponseMarketingEventPublicDefaultResponse';
import { BatchResponseSubscriberEmailResponse } from '../models/BatchResponseSubscriberEmailResponse';
import { BatchResponseSubscriberVidResponse } from '../models/BatchResponseSubscriberVidResponse';
import { CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging } from '../models/CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging';
import { EventDetailSettings } from '../models/EventDetailSettings';
import { EventDetailSettingsUrl } from '../models/EventDetailSettingsUrl';
import { MarketingEventCompleteRequestParams } from '../models/MarketingEventCompleteRequestParams';
import { MarketingEventCreateRequestParams } from '../models/MarketingEventCreateRequestParams';
import { MarketingEventDefaultResponse } from '../models/MarketingEventDefaultResponse';
import { MarketingEventPublicDefaultResponse } from '../models/MarketingEventPublicDefaultResponse';
import { MarketingEventPublicReadResponse } from '../models/MarketingEventPublicReadResponse';
import { MarketingEventUpdateRequestParams } from '../models/MarketingEventUpdateRequestParams';
import { AttendanceSubscriberStateChangesApiRequestFactory, AttendanceSubscriberStateChangesApiResponseProcessor } from "../apis/AttendanceSubscriberStateChangesApi";
export interface AttendanceSubscriberStateChangesApiCreateRequest {
    externalEventId: string;
    subscriberState: string;
    batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber;
    externalAccountId?: string;
}
export interface AttendanceSubscriberStateChangesApiCreateByEmailRequest {
    externalEventId: string;
    subscriberState: string;
    batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber;
    externalAccountId?: string;
}
export declare class ObjectAttendanceSubscriberStateChangesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AttendanceSubscriberStateChangesApiRequestFactory, responseProcessor?: AttendanceSubscriberStateChangesApiResponseProcessor);
    createWithHttpInfo(param: AttendanceSubscriberStateChangesApiCreateRequest, options?: Configuration): Promise<HttpInfo<BatchResponseSubscriberVidResponse>>;
    create(param: AttendanceSubscriberStateChangesApiCreateRequest, options?: Configuration): Promise<BatchResponseSubscriberVidResponse>;
    createByEmailWithHttpInfo(param: AttendanceSubscriberStateChangesApiCreateByEmailRequest, options?: Configuration): Promise<HttpInfo<BatchResponseSubscriberEmailResponse>>;
    createByEmail(param: AttendanceSubscriberStateChangesApiCreateByEmailRequest, options?: Configuration): Promise<BatchResponseSubscriberEmailResponse>;
}
import { BasicApiRequestFactory, BasicApiResponseProcessor } from "../apis/BasicApi";
export interface BasicApiArchiveRequest {
    externalEventId: string;
    externalAccountId: string;
}
export interface BasicApiCreateRequest {
    marketingEventCreateRequestParams: MarketingEventCreateRequestParams;
}
export interface BasicApiDoCancelRequest {
    externalEventId: string;
    externalAccountId: string;
}
export interface BasicApiGetByIdRequest {
    externalEventId: string;
    externalAccountId: string;
}
export interface BasicApiReplaceRequest {
    externalEventId: string;
    marketingEventCreateRequestParams: MarketingEventCreateRequestParams;
}
export interface BasicApiUpdateRequest {
    externalEventId: string;
    externalAccountId: string;
    marketingEventUpdateRequestParams: MarketingEventUpdateRequestParams;
}
export declare class ObjectBasicApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BasicApiRequestFactory, responseProcessor?: BasicApiResponseProcessor);
    archiveWithHttpInfo(param: BasicApiArchiveRequest, options?: Configuration): Promise<HttpInfo<void>>;
    archive(param: BasicApiArchiveRequest, options?: Configuration): Promise<void>;
    createWithHttpInfo(param: BasicApiCreateRequest, options?: Configuration): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    create(param: BasicApiCreateRequest, options?: Configuration): Promise<MarketingEventDefaultResponse>;
    doCancelWithHttpInfo(param: BasicApiDoCancelRequest, options?: Configuration): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    doCancel(param: BasicApiDoCancelRequest, options?: Configuration): Promise<MarketingEventDefaultResponse>;
    getByIdWithHttpInfo(param: BasicApiGetByIdRequest, options?: Configuration): Promise<HttpInfo<MarketingEventPublicReadResponse>>;
    getById(param: BasicApiGetByIdRequest, options?: Configuration): Promise<MarketingEventPublicReadResponse>;
    replaceWithHttpInfo(param: BasicApiReplaceRequest, options?: Configuration): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    replace(param: BasicApiReplaceRequest, options?: Configuration): Promise<MarketingEventPublicDefaultResponse>;
    updateWithHttpInfo(param: BasicApiUpdateRequest, options?: Configuration): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    update(param: BasicApiUpdateRequest, options?: Configuration): Promise<MarketingEventPublicDefaultResponse>;
}
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export interface BatchApiArchiveBatchRequest {
    batchInputMarketingEventExternalUniqueIdentifier: BatchInputMarketingEventExternalUniqueIdentifier;
}
export interface BatchApiDoUpsertRequest {
    batchInputMarketingEventCreateRequestParams: BatchInputMarketingEventCreateRequestParams;
}
export declare class ObjectBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archiveBatchWithHttpInfo(param: BatchApiArchiveBatchRequest, options?: Configuration): Promise<HttpInfo<void>>;
    archiveBatch(param: BatchApiArchiveBatchRequest, options?: Configuration): Promise<void>;
    doUpsertWithHttpInfo(param: BatchApiDoUpsertRequest, options?: Configuration): Promise<HttpInfo<BatchResponseMarketingEventPublicDefaultResponse>>;
    doUpsert(param: BatchApiDoUpsertRequest, options?: Configuration): Promise<BatchResponseMarketingEventPublicDefaultResponse>;
}
import { MarketingEventsExternalApiRequestFactory, MarketingEventsExternalApiResponseProcessor } from "../apis/MarketingEventsExternalApi";
export interface MarketingEventsExternalApiCompleteRequest {
    externalEventId: string;
    externalAccountId: string;
    marketingEventCompleteRequestParams: MarketingEventCompleteRequestParams;
}
export declare class ObjectMarketingEventsExternalApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MarketingEventsExternalApiRequestFactory, responseProcessor?: MarketingEventsExternalApiResponseProcessor);
    completeWithHttpInfo(param: MarketingEventsExternalApiCompleteRequest, options?: Configuration): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    complete(param: MarketingEventsExternalApiCompleteRequest, options?: Configuration): Promise<MarketingEventDefaultResponse>;
}
import { SearchApiRequestFactory, SearchApiResponseProcessor } from "../apis/SearchApi";
export interface SearchApiDoSearchRequest {
    q: string;
}
export declare class ObjectSearchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SearchApiRequestFactory, responseProcessor?: SearchApiResponseProcessor);
    doSearchWithHttpInfo(param: SearchApiDoSearchRequest, options?: Configuration): Promise<HttpInfo<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>>;
    doSearch(param: SearchApiDoSearchRequest, options?: Configuration): Promise<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>;
}
import { SettingsApiRequestFactory, SettingsApiResponseProcessor } from "../apis/SettingsApi";
export interface SettingsApiCreateRequest {
    appId: number;
    eventDetailSettingsUrl: EventDetailSettingsUrl;
}
export interface SettingsApiGetAllRequest {
    appId: number;
}
export declare class ObjectSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SettingsApiRequestFactory, responseProcessor?: SettingsApiResponseProcessor);
    createWithHttpInfo(param: SettingsApiCreateRequest, options?: Configuration): Promise<HttpInfo<EventDetailSettings>>;
    create(param: SettingsApiCreateRequest, options?: Configuration): Promise<EventDetailSettings>;
    getAllWithHttpInfo(param: SettingsApiGetAllRequest, options?: Configuration): Promise<HttpInfo<EventDetailSettings>>;
    getAll(param: SettingsApiGetAllRequest, options?: Configuration): Promise<EventDetailSettings>;
}
import { SubscriberStateChangesApiRequestFactory, SubscriberStateChangesApiResponseProcessor } from "../apis/SubscriberStateChangesApi";
export interface SubscriberStateChangesApiDoEmailUpsertByIdRequest {
    externalEventId: string;
    subscriberState: string;
    externalAccountId: string;
    batchInputMarketingEventEmailSubscriber: BatchInputMarketingEventEmailSubscriber;
}
export interface SubscriberStateChangesApiDoUpsertByIdRequest {
    externalEventId: string;
    subscriberState: string;
    externalAccountId: string;
    batchInputMarketingEventSubscriber: BatchInputMarketingEventSubscriber;
}
export declare class ObjectSubscriberStateChangesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SubscriberStateChangesApiRequestFactory, responseProcessor?: SubscriberStateChangesApiResponseProcessor);
    doEmailUpsertByIdWithHttpInfo(param: SubscriberStateChangesApiDoEmailUpsertByIdRequest, options?: Configuration): Promise<HttpInfo<void>>;
    doEmailUpsertById(param: SubscriberStateChangesApiDoEmailUpsertByIdRequest, options?: Configuration): Promise<void>;
    doUpsertByIdWithHttpInfo(param: SubscriberStateChangesApiDoUpsertByIdRequest, options?: Configuration): Promise<HttpInfo<void>>;
    doUpsertById(param: SubscriberStateChangesApiDoUpsertByIdRequest, options?: Configuration): Promise<void>;
}
