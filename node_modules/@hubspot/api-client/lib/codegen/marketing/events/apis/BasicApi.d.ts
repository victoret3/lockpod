import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { MarketingEventCreateRequestParams } from '../models/MarketingEventCreateRequestParams';
import { MarketingEventDefaultResponse } from '../models/MarketingEventDefaultResponse';
import { MarketingEventPublicDefaultResponse } from '../models/MarketingEventPublicDefaultResponse';
import { MarketingEventPublicReadResponse } from '../models/MarketingEventPublicReadResponse';
import { MarketingEventUpdateRequestParams } from '../models/MarketingEventUpdateRequestParams';
export declare class BasicApiRequestFactory extends BaseAPIRequestFactory {
    archive(externalEventId: string, externalAccountId: string, _options?: Configuration): Promise<RequestContext>;
    create(marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: Configuration): Promise<RequestContext>;
    doCancel(externalEventId: string, externalAccountId: string, _options?: Configuration): Promise<RequestContext>;
    getById(externalEventId: string, externalAccountId: string, _options?: Configuration): Promise<RequestContext>;
    replace(externalEventId: string, marketingEventCreateRequestParams: MarketingEventCreateRequestParams, _options?: Configuration): Promise<RequestContext>;
    update(externalEventId: string, externalAccountId: string, marketingEventUpdateRequestParams: MarketingEventUpdateRequestParams, _options?: Configuration): Promise<RequestContext>;
}
export declare class BasicApiResponseProcessor {
    archiveWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    createWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    doCancelWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventDefaultResponse>>;
    getByIdWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicReadResponse>>;
    replaceWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
    updateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MarketingEventPublicDefaultResponse>>;
}
